using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Systems.Onboarding.Controls;

[GenerateTypedNameReferences]
public sealed partial class OnboardingLayerWidget : UIWidget
{
    private Dictionary<string, PromptData> _onboardingPromptData = new();
    public OnboardingLayerWidget()
    {
        RobustXamlLoader.Load(this);
    }
    public bool HasTarget(string name)
    {
        return _onboardingPromptData.ContainsKey(name);
    }

    private Vector2 GetDirectionOffset(Control target, Control prompt ,Direction direction)
    {
        var normal = direction.ToVec();
        return new Vector2(target.Size.X * normal.X+prompt.Size.X/2, target.Size.Y * normal.Y+ prompt.Size.Y/2);
    }

    public void AddPrompt(Control target, Control prompt)
    {
        if (prompt.Parent != null || target.Name == null)
            return;
        _onboardingPromptData.TryAdd(target.Name, new (target, prompt));
        OnboardingHUD.AddChild(prompt);
        LayoutContainer.SetPosition(prompt, target.GlobalPosition);
    }

    public void OffsetPrompt(Control target, Control prompt, Direction direction, float distanceMultiplier = 1.0f)
    {
        var offset = GetDirectionOffset(target, prompt,direction.Invert());
        offset *= distanceMultiplier;
        LayoutContainer.SetPosition(prompt, new Vector2(target.GlobalPosition.X + offset.X, target.GlobalPosition.Y + offset.Y));
    }

    public void RemovePrompt(string name)
    {
        if (_onboardingPromptData.Remove(name, out var promptData))
            promptData.Prompt.Dispose();
    }

    public void ClearPrompts()
    {
        _onboardingPromptData.Clear();
        DisposeAllChildren();
    }

    private record struct PromptData(Control Target, Control Prompt);
}

